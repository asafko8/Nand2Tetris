// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    // Handling X input
    Mux16(a= x, b= false, sel= zx, out= aZX);
    Not16(in= aZX, out= notX);
    Mux16(a= aZX, b= notX, sel= nx, out= aNX);

    // Handling Y input
    Mux16(a= y, b= false, sel= zy, out=aZY);
    Not16(in= aZY, out= notY);
    Mux16(a= aZY, b= notY, sel= ny, out= aNY);
    
    // Handling f
    And16(a= aNX, b= aNY, out= xANDy);
    Add16(a= aNX, b= aNY, out= xADDy);
    Mux16(a= xANDy, b= xADDy, sel= f, out= fOut);

    // Handling no + ng
    Not16(in= fOut, out= notOut);
    Mux16(a= fOut, b= notOut, sel= no, out[0..7]= rOut, out[8..15]= lOut, out[15]= ng);
    Add16(a[0..7]= rOut, a[8..15]= lOut, b= false, out= out);

    // Handling zr
    Or8Way(in= rOut, out= rOr);
    Or8Way(in= lOut, out=lOr);
    Or(a= lOr, b= rOr, out= notZR);
    Not(in= notZR, out= zr);
}