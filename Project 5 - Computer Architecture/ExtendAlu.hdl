// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     ALU(x= x, y= y, zx= instruction[5], nx= instruction[4], zy= instruction[3], ny= instruction[2], f= instruction[1], no= instruction[0], out= aluOut, zr= regZR, ng= regNG);
     
     ShiftLeft(in= x, out= leftX);
     ShiftRight(in= x, out= rightX);
     ShiftLeft(in= y, out= leftY);
     ShiftRight(in= y, out= rightY);

     Mux4Way16(a= rightY, b= rightX, c= leftY, d= leftX, sel= instruction[4..5], out= shiftAlu);
     Mux16(a= shiftAlu, b= aluOut, sel= instruction[8], out[0..7]= rOut, out[8..15]= lOut, out[15]= ng, out= out);
     
     Or8Way(in= rOut, out= rOr);
     Or8Way(in= lOut, out=lOr);
     Or(a= lOr, b= rOr, out= notZR);
     Not(in= notZR, out= zr);
}
